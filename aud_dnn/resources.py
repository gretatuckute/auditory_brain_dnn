##### Related to source DNN models #####

# Dictionary with key as the source DNN model name and value as a list of the model layers names in correct order.
# Layers included in this dictionary will be loaded in the final analyses compilations.
d_layer_reindex = {
    'Kell2018music': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018word': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018wordSeed2': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018speaker': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018speakerSeed2': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018audioset': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018audiosetSeed2': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],
    'Kell2018multitask': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc'],
    'Kell2018multitaskSeed2': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc'],
    'Kell2018init': ['relu0', 'maxpool0', 'relu1', 'maxpool1', 'relu2', 'relu3', 'relu4', 'avgpool', 'relufc', ],

    'ResNet50music': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50word': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50wordSeed2': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50speaker': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50speakerSeed2': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50audioset': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50audiosetSeed2': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50multitask': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50multitaskSeed2': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],
    'ResNet50init': ['conv1_relu1', 'maxpool1', 'layer1', 'layer2', 'layer3', 'layer4', 'avgpool', ],

    'DS2': ['Tanh_1', 'Tanh_2', 'LSTM_1-cell', 'LSTM_2-cell', 'LSTM_3-cell', 'LSTM_4-cell', 'LSTM_5-cell', 'Linear'],
    'wav2vec': ['Embedding', 'Encoder_1', 'Encoder_2', 'Encoder_3', 'Encoder_4', 'Encoder_5', 'Encoder_6',
                'Encoder_7', 'Encoder_8', 'Encoder_9', 'Encoder_10', 'Encoder_11', 'Encoder_12', 'Final'],
    'VGGish': ['ReLU_1', 'MaxPool2d_1', 'ReLU_2', 'MaxPool2d_2', 'ReLU_3', 'ReLU_4', 'MaxPool2d_3', 'ReLU_5', 'ReLU_6',
               'MaxPool2d_4', 'ReLU_7', 'ReLU_8', 'ReLU_9'],
    'DCASE2020': ['GRU_1', 'GRU_2', 'GRU_3', 'GRU_4', 'Linear'],
    'AST': ['Embedding', 'Encoder_1', 'Encoder_2', 'Encoder_3', 'Encoder_4', 'Encoder_5', 'Encoder_6',
            'Encoder_7', 'Encoder_8', 'Encoder_9', 'Encoder_10', 'Encoder_11', 'Encoder_12', 'Final'],
    'ZeroSpeech2020': ['ReLU_1', 'ReLU_2', 'ReLU_3', 'ReLU_4', 'ReLU_5'],
    'sepformer': ['Embedding', 'Encoder_1', 'Encoder_2', 'Encoder_3', 'Encoder_4', 'Encoder_5', 'Encoder_6',
                  'Encoder_7', 'Encoder_8', 'Encoder_9', 'Encoder_10', 'Encoder_11', 'Encoder_12', 'Encoder_13',
                  'Encoder_14', 'Encoder_15', 'Encoder_16', 'Encoder_17', 'Encoder_18', 'Encoder_19', 'Encoder_20',
                  'Encoder_21', 'Encoder_22', 'Encoder_23', 'Encoder_24', 'Encoder_25', 'Encoder_26', 'Encoder_27',
                  'Encoder_28', 'Encoder_29', 'Encoder_30', 'Encoder_31', 'Encoder_32'],
    'metricGAN': ['LSTM_1-cell', 'LSTM_2-cell', 'Linear_1', 'Linear_2'],
    'S2T': ['Embedding', 'Encoder_1', 'Encoder_2', 'Encoder_3', 'Encoder_4', 'Encoder_5', 'Encoder_6',
            'Encoder_7', 'Encoder_8', 'Encoder_9', 'Encoder_10', 'Encoder_11', 'Encoder_12'],
    'spectemp': ['avgpool'],
}

# Dictionary with keys as the name of the source DNN model and value a dictionary with the keys as the 'pretty',
# interpretable name of the layer, and the value the name of the layer it was saved as (the PyTorch name).
# This is only used for the external models given that they are extracted using Pytorch module names.
source_layer_map = {
    'DCASE2020': {
        'GRU_1': 'GRU(64, 256, batch_first=True, bidirectional=True)--0--hidden',
        'GRU_2': 'GRU(512, 256, batch_first=True, bidirectional=True)--0--hidden',
        'GRU_3': 'GRU(512, 256, batch_first=True, bidirectional=True)--1--hidden',
        'GRU_4': 'GRU(512, 256, batch_first=True)--0--hidden',  # decoder
        'Linear': 'Linear(in_features=256, out_features=4367, bias=True)--0'
    },
    'DS2': {
        'Conv2d_1': 'Conv2d(1, 32, kernel_size=(41, 11), stride=(2, 2), padding=(20, 5))--0',
        'Bn2d_1': 'BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)--0',
        'Tanh_1': 'Hardtanh(min_val=0, max_val=20)--0',
        'Conv2d_2': 'Conv2d(32, 32, kernel_size=(21, 11), stride=(2, 1), padding=(10, 5))--0',
        'Bn2d_2': 'BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)--1',
        'Tanh_2': 'Hardtanh(min_val=0, max_val=20)--1',
        'LSTM_1': 'LSTM(1312, 1024, bidirectional=True)--0--hidden',  # hidden
        'LSTM_1-cell': 'LSTM(1312, 1024, bidirectional=True)--0--cell', # cell states: these are the ones we use, see d_layer_reindex and paper methods
        'LSTM_2': 'LSTM(1024, 1024, bidirectional=True)--0--hidden',
        'LSTM_2-cell': 'LSTM(1024, 1024, bidirectional=True)--0--cell',
        'LSTM_3': 'LSTM(1024, 1024, bidirectional=True)--1--hidden',
        'LSTM_3-cell': 'LSTM(1024, 1024, bidirectional=True)--1--cell',
        'LSTM_4': 'LSTM(1024, 1024, bidirectional=True)--2--hidden',
        'LSTM_4-cell': 'LSTM(1024, 1024, bidirectional=True)--2--cell',
        'LSTM_5': 'LSTM(1024, 1024, bidirectional=True)--3--hidden',
        'LSTM_5-cell': 'LSTM(1024, 1024, bidirectional=True)--3--cell',
        'Linear': 'Linear(in_features=1024, out_features=29, bias=False)--0'
    },
    'VGGish': {
        'Conv2d_1': 'Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))--0',
        'ReLU_1': 'ReLU()--0', # we use the ReLU outputs to avoid negative values
        'MaxPool2d_1': 'MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)--0',
        'Conv2d_2': 'Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))--0',
        'ReLU_2': 'ReLU()--1',
        'MaxPool2d_2': 'MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)--1',
        'Conv2d_3': 'Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))--0',
        'ReLU_3': 'ReLU()--2',
        'Conv2d_4': 'Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))--0',
        'ReLU_4': 'ReLU()--3',
        'MaxPool2d_3': 'MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)--2',
        'Conv2d_5': 'Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))--0',
        'ReLU_5': 'ReLU()--4',
        'Conv2d_6': 'Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))--0',
        'ReLU_6': 'ReLU()--5',
        'MaxPool2d_4': 'MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)--3',
        'Linear_1': 'Linear(in_features=12288, out_features=4096, bias=True)--0',
        'ReLU_7': 'ReLU()--6',
        'Linear_2': 'Linear(in_features=4096, out_features=4096, bias=True)--0',
        'ReLU_8': 'ReLU()--7',
        'Linear_3': 'Linear(in_features=4096, out_features=128, bias=True)--0',
        'ReLU_9': 'ReLU()--8',
        'Post-Processed_Features': 'Post-Processed_Features'
    },
    # 'ResNet50': {'input_after_preproc': 0,  # general resnet
    #              'conv1': 1,
    #              'bn1': 2,
    #              'relu1': 3,
    #              'maxpool1': 4,
    #              'layer1': 5,
    #              'layer2': 6,
    #              'layer3': 7,
    #              'layer4': 8,
    #              'avgpool': 9,
    #              'final': 10},
    'AST': {'Embedding': 'Conv2d(1, 768, kernel_size=(16, 16), stride=(10, 10))--0',  # patch embedding, the conv layer
            'Encoder_1': 'Linear(in_features=3072, out_features=768, bias=True)--0',
            'Encoder_2': 'Linear(in_features=3072, out_features=768, bias=True)--1',
            'Encoder_3': 'Linear(in_features=3072, out_features=768, bias=True)--2',
            'Encoder_4': 'Linear(in_features=3072, out_features=768, bias=True)--3',
            'Encoder_5': 'Linear(in_features=3072, out_features=768, bias=True)--4',
            'Encoder_6': 'Linear(in_features=3072, out_features=768, bias=True)--5',
            'Encoder_7': 'Linear(in_features=3072, out_features=768, bias=True)--6',
            'Encoder_8': 'Linear(in_features=3072, out_features=768, bias=True)--7',
            'Encoder_9': 'Linear(in_features=3072, out_features=768, bias=True)--8',
            'Encoder_10': 'Linear(in_features=3072, out_features=768, bias=True)--9',
            'Encoder_11': 'Linear(in_features=3072, out_features=768, bias=True)--10',
            'Encoder_12': 'Linear(in_features=3072, out_features=768, bias=True)--11',
            'Final': 'Final'},
    'ZeroSpeech2020': {'ReLU_1': 'ReLU(inplace=True)--0',
                       'ReLU_2': 'ReLU(inplace=True)--1',
                       'ReLU_3': 'ReLU(inplace=True)--2',
                       'ReLU_4': 'ReLU(inplace=True)--3',
                       'ReLU_5': 'ReLU(inplace=True)--4', },
    'wav2vec': {'Embedding': 'Embedding',
                'Encoder_1': 'Encoder_1',
                'Encoder_2': 'Encoder_2',
                'Encoder_3': 'Encoder_3',
                'Encoder_4': 'Encoder_4',
                'Encoder_5': 'Encoder_5',
                'Encoder_6': 'Encoder_6',
                'Encoder_7': 'Encoder_7',
                'Encoder_8': 'Encoder_8',
                'Encoder_9': 'Encoder_9',
                'Encoder_10': 'Encoder_10',
                'Encoder_11': 'Encoder_11',
                'Encoder_12': 'Encoder_12',
                'Final': 'Logits',},
    'sepformer': {
        'Embedding': 'Conv1d(1, 256, kernel_size=(16,), stride=(8,), bias=False)--0',
        'Encoder_1': 'Linear(in_features=1024, out_features=256, bias=True)--0',
        'Encoder_2': 'Linear(in_features=1024, out_features=256, bias=True)--1',
        'Encoder_3': 'Linear(in_features=1024, out_features=256, bias=True)--2',
        'Encoder_4': 'Linear(in_features=1024, out_features=256, bias=True)--3',
        'Encoder_5': 'Linear(in_features=1024, out_features=256, bias=True)--4',
        'Encoder_6': 'Linear(in_features=1024, out_features=256, bias=True)--5',
        'Encoder_7': 'Linear(in_features=1024, out_features=256, bias=True)--6',
        'Encoder_8': 'Linear(in_features=1024, out_features=256, bias=True)--7',
        'Encoder_9': 'Linear(in_features=1024, out_features=256, bias=True)--8',
        'Encoder_10': 'Linear(in_features=1024, out_features=256, bias=True)--9',
        'Encoder_11': 'Linear(in_features=1024, out_features=256, bias=True)--10',
        'Encoder_12': 'Linear(in_features=1024, out_features=256, bias=True)--11',
        'Encoder_13': 'Linear(in_features=1024, out_features=256, bias=True)--12',
        'Encoder_14': 'Linear(in_features=1024, out_features=256, bias=True)--13',
        'Encoder_15': 'Linear(in_features=1024, out_features=256, bias=True)--14',
        'Encoder_16': 'Linear(in_features=1024, out_features=256, bias=True)--15',
        'Encoder_17': 'Linear(in_features=1024, out_features=256, bias=True)--16',
        'Encoder_18': 'Linear(in_features=1024, out_features=256, bias=True)--17',
        'Encoder_19': 'Linear(in_features=1024, out_features=256, bias=True)--18',
        'Encoder_20': 'Linear(in_features=1024, out_features=256, bias=True)--19',
        'Encoder_21': 'Linear(in_features=1024, out_features=256, bias=True)--20',
        'Encoder_22': 'Linear(in_features=1024, out_features=256, bias=True)--21',
        'Encoder_23': 'Linear(in_features=1024, out_features=256, bias=True)--22',
        'Encoder_24': 'Linear(in_features=1024, out_features=256, bias=True)--23',
        'Encoder_25': 'Linear(in_features=1024, out_features=256, bias=True)--24',
        'Encoder_26': 'Linear(in_features=1024, out_features=256, bias=True)--25',
        'Encoder_27': 'Linear(in_features=1024, out_features=256, bias=True)--26',
        'Encoder_28': 'Linear(in_features=1024, out_features=256, bias=True)--27',
        'Encoder_29': 'Linear(in_features=1024, out_features=256, bias=True)--28',
        'Encoder_30': 'Linear(in_features=1024, out_features=256, bias=True)--29',
        'Encoder_31': 'Linear(in_features=1024, out_features=256, bias=True)--30',
        'Encoder_32': 'Linear(in_features=1024, out_features=256, bias=True)--31',
    },
    'metricGAN': {
        'LSTM_1': 'LSTM(257, 200, num_layers=2, batch_first=True, bidirectional=True)--l1--hidden',
        'LSTM_1-cell': 'LSTM(257, 200, num_layers=2, batch_first=True, bidirectional=True)--l1--cell', # cell states: these are the ones we use, see d_layer_reindex and paper methods
        'LSTM_2': 'LSTM(257, 200, num_layers=2, batch_first=True, bidirectional=True)--l2--hidden',
        'LSTM_2-cell': 'LSTM(257, 200, num_layers=2, batch_first=True, bidirectional=True)--l2--cell',
        'Linear_1': 'Linear(in_features=400, out_features=300, bias=True)--0',
        'Linear_2': 'Linear(in_features=300, out_features=257, bias=True)--0'
    },
    'S2T': {'Embedding': 'Embedding',
            'Encoder_1': 'Encoder_1',
            'Encoder_2': 'Encoder_2',
            'Encoder_3': 'Encoder_3',
            'Encoder_4': 'Encoder_4',
            'Encoder_5': 'Encoder_5',
            'Encoder_6': 'Encoder_6',
            'Encoder_7': 'Encoder_7',
            'Encoder_8': 'Encoder_8',
            'Encoder_9': 'Encoder_9',
            'Encoder_10': 'Encoder_10',
            'Encoder_11': 'Encoder_11',
            'Encoder_12': 'Encoder_12'},

}

d_randnetw = {'True': '_randnetw',
              'False': ''}